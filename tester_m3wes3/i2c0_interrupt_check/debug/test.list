


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 INCLUDE          ../00_include/i2c0.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c0.s
    5 00000000         ; Purpose:  Register definition for module I2C0
    6 00000000         ; Compatibility: ARM
    7 00000000         ; Date created: 05/22/2018 09:51:44 AM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------
   14 00000000         
   15 00000000 E6500000 
                       I2C0_ICSCR
                               EQU              0xE6500000
   16 00000000 E6500004 
                       I2C0_ICMCR
                               EQU              0xE6500004
   17 00000000 E6500008 
                       I2C0_ICSSR
                               EQU              0xE6500008
   18 00000000 E650000C 
                       I2C0_ICMSR
                               EQU              0xE650000C
   19 00000000 E6500010 
                       I2C0_ICSIER
                               EQU              0xE6500010
   20 00000000 E6500014 
                       I2C0_ICMIER
                               EQU              0xE6500014
   21 00000000 E6500018 
                       I2C0_ICCCR
                               EQU              0xE6500018
   22 00000000 E650001C 
                       I2C0_ICSAR
                               EQU              0xE650001C
   23 00000000 E6500020 
                       I2C0_ICMAR
                               EQU              0xE6500020
   24 00000000 E6500024 
                       I2C0_ICxXD
                               EQU              0xE6500024
   25 00000000 E6500028 
                       I2C0_ICCCR2
                               EQU              0xE6500028
   26 00000000 E650002C 
                       I2C0_ICMPR
                               EQU              0xE650002C
   27 00000000 E6500030 
                       I2C0_ICHPR
                               EQU              0xE6500030



ARM Macro Assembler    Page 2 


   28 00000000 E6500034 
                       I2C0_ICLPR
                               EQU              0xE6500034
   29 00000000 E6500038 
                       I2C0_ICFBSCR
                               EQU              0xE6500038
   30 00000000 E650003C 
                       I2C0_ICDMAER
                               EQU              0xE650003C
   31 00000000         
   32 00000000                 END
    3 00000000                 INCLUDE          ../00_include/i2c1.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c1.s
    5 00000000         ; Purpose:  Register definition for module I2C1
    6 00000000         ; Compatibility: ARM
    7 00000000         ; Date created: 05/25/2018 03:54:37 PM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------
   14 00000000         
   15 00000000 E6508000 
                       I2C1_ICSCR
                               EQU              0xE6508000
   16 00000000 E6508004 
                       I2C1_ICMCR
                               EQU              0xE6508004
   17 00000000 E6508008 
                       I2C1_ICSSR
                               EQU              0xE6508008
   18 00000000 E650800C 
                       I2C1_ICMSR
                               EQU              0xE650800C
   19 00000000 E6508010 
                       I2C1_ICSIER
                               EQU              0xE6508010
   20 00000000 E6508014 
                       I2C1_ICMIER
                               EQU              0xE6508014
   21 00000000 E6508018 
                       I2C1_ICCCR
                               EQU              0xE6508018
   22 00000000 E650801C 
                       I2C1_ICSAR
                               EQU              0xE650801C
   23 00000000 E6508020 
                       I2C1_ICMAR
                               EQU              0xE6508020
   24 00000000 E6508024 
                       I2C1_ICxXD



ARM Macro Assembler    Page 3 


                               EQU              0xE6508024
   25 00000000 E6508028 
                       I2C1_ICCCR2
                               EQU              0xE6508028
   26 00000000 E650802C 
                       I2C1_ICMPR
                               EQU              0xE650802C
   27 00000000 E6508030 
                       I2C1_ICHPR
                               EQU              0xE6508030
   28 00000000 E6508034 
                       I2C1_ICLPR
                               EQU              0xE6508034
   29 00000000 E6508038 
                       I2C1_ICFBSCR
                               EQU              0xE6508038
   30 00000000 E650803C 
                       I2C1_ICDMAER
                               EQU              0xE650803C
   31 00000000         
   32 00000000                 END
    4 00000000                 INCLUDE          ../00_include/i2c2.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c2.s
    5 00000000         ; Purpose:  Register definition for module I2C2
    6 00000000         ; Compatibility: ARM
    7 00000000         ; Date created: 05/25/2018 03:56:04 PM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------
   14 00000000         
   15 00000000 E6510000 
                       I2C2_ICSCR
                               EQU              0xE6510000
   16 00000000 E6510004 
                       I2C2_ICMCR
                               EQU              0xE6510004
   17 00000000 E6510008 
                       I2C2_ICSSR
                               EQU              0xE6510008
   18 00000000 E651000C 
                       I2C2_ICMSR
                               EQU              0xE651000C
   19 00000000 E6510010 
                       I2C2_ICSIER
                               EQU              0xE6510010
   20 00000000 E6510014 
                       I2C2_ICMIER
                               EQU              0xE6510014
   21 00000000 E6510018 



ARM Macro Assembler    Page 4 


                       I2C2_ICCCR
                               EQU              0xE6510018
   22 00000000 E651001C 
                       I2C2_ICSAR
                               EQU              0xE651001C
   23 00000000 E6510020 
                       I2C2_ICMAR
                               EQU              0xE6510020
   24 00000000 E6510024 
                       I2C2_ICxXD
                               EQU              0xE6510024
   25 00000000 E6510028 
                       I2C2_ICCCR2
                               EQU              0xE6510028
   26 00000000 E651002C 
                       I2C2_ICMPR
                               EQU              0xE651002C
   27 00000000 E6510030 
                       I2C2_ICHPR
                               EQU              0xE6510030
   28 00000000 E6510034 
                       I2C2_ICLPR
                               EQU              0xE6510034
   29 00000000 E6510038 
                       I2C2_ICFBSCR
                               EQU              0xE6510038
   30 00000000 E651003C 
                       I2C2_ICDMAER
                               EQU              0xE651003C
   31 00000000         
   32 00000000                 END
    5 00000000                 INCLUDE          ../00_include/i2c3.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c3.s
    5 00000000         ; Purpose:  Register definition for module I2C3
    6 00000000         ; Compatibility: ARM
    7 00000000         ; Date created: 05/25/2018 03:56:44 PM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------
   14 00000000         
   15 00000000 E66D0000 
                       I2C3_ICSCR
                               EQU              0xE66D0000
   16 00000000 E66D0004 
                       I2C3_ICMCR
                               EQU              0xE66D0004
   17 00000000 E66D0008 
                       I2C3_ICSSR
                               EQU              0xE66D0008



ARM Macro Assembler    Page 5 


   18 00000000 E66D000C 
                       I2C3_ICMSR
                               EQU              0xE66D000C
   19 00000000 E66D0010 
                       I2C3_ICSIER
                               EQU              0xE66D0010
   20 00000000 E66D0014 
                       I2C3_ICMIER
                               EQU              0xE66D0014
   21 00000000 E66D0018 
                       I2C3_ICCCR
                               EQU              0xE66D0018
   22 00000000 E66D001C 
                       I2C3_ICSAR
                               EQU              0xE66D001C
   23 00000000 E66D0020 
                       I2C3_ICMAR
                               EQU              0xE66D0020
   24 00000000 E66D0024 
                       I2C3_ICxXD
                               EQU              0xE66D0024
   25 00000000 E66D0028 
                       I2C3_ICCCR2
                               EQU              0xE66D0028
   26 00000000 E66D002C 
                       I2C3_ICMPR
                               EQU              0xE66D002C
   27 00000000 E66D0030 
                       I2C3_ICHPR
                               EQU              0xE66D0030
   28 00000000 E66D0034 
                       I2C3_ICLPR
                               EQU              0xE66D0034
   29 00000000 E66D0038 
                       I2C3_ICFBSCR
                               EQU              0xE66D0038
   30 00000000 E66D003C 
                       I2C3_ICDMAER
                               EQU              0xE66D003C
   31 00000000         
   32 00000000                 END
    6 00000000                 INCLUDE          ../00_include/i2c4.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c4.s
    5 00000000         ; Purpose:  Register definition for module I2C4
    6 00000000         ; Compatibility: ARM
    7 00000000         ; Date created: 05/25/2018 03:57:05 PM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------



ARM Macro Assembler    Page 6 


   14 00000000         
   15 00000000 E66D8000 
                       I2C4_ICSCR
                               EQU              0xE66D8000
   16 00000000 E66D8004 
                       I2C4_ICMCR
                               EQU              0xE66D8004
   17 00000000 E66D8008 
                       I2C4_ICSSR
                               EQU              0xE66D8008
   18 00000000 E66D800C 
                       I2C4_ICMSR
                               EQU              0xE66D800C
   19 00000000 E66D8010 
                       I2C4_ICSIER
                               EQU              0xE66D8010
   20 00000000 E66D8014 
                       I2C4_ICMIER
                               EQU              0xE66D8014
   21 00000000 E66D8018 
                       I2C4_ICCCR
                               EQU              0xE66D8018
   22 00000000 E66D801C 
                       I2C4_ICSAR
                               EQU              0xE66D801C
   23 00000000 E66D8020 
                       I2C4_ICMAR
                               EQU              0xE66D8020
   24 00000000 E66D8024 
                       I2C4_ICxXD
                               EQU              0xE66D8024
   25 00000000 E66D8028 
                       I2C4_ICCCR2
                               EQU              0xE66D8028
   26 00000000 E66D802C 
                       I2C4_ICMPR
                               EQU              0xE66D802C
   27 00000000 E66D8030 
                       I2C4_ICHPR
                               EQU              0xE66D8030
   28 00000000 E66D8034 
                       I2C4_ICLPR
                               EQU              0xE66D8034
   29 00000000 E66D8038 
                       I2C4_ICFBSCR
                               EQU              0xE66D8038
   30 00000000 E66D803C 
                       I2C4_ICDMAER
                               EQU              0xE66D803C
   31 00000000         
   32 00000000                 END
    7 00000000                 INCLUDE          ../00_include/i2c5.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c5.s
    5 00000000         ; Purpose:  Register definition for module I2C5
    6 00000000         ; Compatibility: ARM



ARM Macro Assembler    Page 7 


    7 00000000         ; Date created: 05/25/2018 04:03:48 PM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------
   14 00000000         
   15 00000000 E66E0000 
                       I2C5_ICSCR
                               EQU              0xE66E0000
   16 00000000 E66E0004 
                       I2C5_ICMCR
                               EQU              0xE66E0004
   17 00000000 E66E0008 
                       I2C5_ICSSR
                               EQU              0xE66E0008
   18 00000000 E66E000C 
                       I2C5_ICMSR
                               EQU              0xE66E000C
   19 00000000 E66E0010 
                       I2C5_ICSIER
                               EQU              0xE66E0010
   20 00000000 E66E0014 
                       I2C5_ICMIER
                               EQU              0xE66E0014
   21 00000000 E66E0018 
                       I2C5_ICCCR
                               EQU              0xE66E0018
   22 00000000 E66E001C 
                       I2C5_ICSAR
                               EQU              0xE66E001C
   23 00000000 E66E0020 
                       I2C5_ICMAR
                               EQU              0xE66E0020
   24 00000000 E66E0024 
                       I2C5_ICxXD
                               EQU              0xE66E0024
   25 00000000 E66E0028 
                       I2C5_ICCCR2
                               EQU              0xE66E0028
   26 00000000 E66E002C 
                       I2C5_ICMPR
                               EQU              0xE66E002C
   27 00000000 E66E0030 
                       I2C5_ICHPR
                               EQU              0xE66E0030
   28 00000000 E66E0034 
                       I2C5_ICLPR
                               EQU              0xE66E0034
   29 00000000 E66E0038 
                       I2C5_ICFBSCR
                               EQU              0xE66E0038
   30 00000000 E66E003C 
                       I2C5_ICDMAER
                               EQU              0xE66E003C



ARM Macro Assembler    Page 8 


   31 00000000         
   32 00000000                 END
    8 00000000                 INCLUDE          ../00_include/i2c6.s
    1 00000000         
    2 00000000         ;-------------------------------------------------------
                       ------------------------
    3 00000000         ; 
    4 00000000         ; File:   i2c6.s
    5 00000000         ; Purpose:  Register definition for module I2C6
    6 00000000         ; Compatibility: ARM
    7 00000000         ; Date created: 05/25/2018 04:04:18 PM
    8 00000000         ; 
    9 00000000         ; This source code is generated by TM Creator, written b
                       y 2082 - Hau Sy Le.
   10 00000000         ; If you found any bug, please feedback to me at hau.le.
                       eb@rvc.renesas.com
   11 00000000         ; Your feedback is very valuable.
   12 00000000         ; 
   13 00000000         ;-------------------------------------------------------
                       ------------------------
   14 00000000         
   15 00000000 E66E8000 
                       I2C6_ICSCR
                               EQU              0xE66E8000
   16 00000000 E66E8004 
                       I2C6_ICMCR
                               EQU              0xE66E8004
   17 00000000 E66E8008 
                       I2C6_ICSSR
                               EQU              0xE66E8008
   18 00000000 E66E800C 
                       I2C6_ICMSR
                               EQU              0xE66E800C
   19 00000000 E66E8010 
                       I2C6_ICSIER
                               EQU              0xE66E8010
   20 00000000 E66E8014 
                       I2C6_ICMIER
                               EQU              0xE66E8014
   21 00000000 E66E8018 
                       I2C6_ICCCR
                               EQU              0xE66E8018
   22 00000000 E66E801C 
                       I2C6_ICSAR
                               EQU              0xE66E801C
   23 00000000 E66E8020 
                       I2C6_ICMAR
                               EQU              0xE66E8020
   24 00000000 E66E8024 
                       I2C6_ICxXD
                               EQU              0xE66E8024
   25 00000000 E66E8028 
                       I2C6_ICCCR2
                               EQU              0xE66E8028
   26 00000000 E66E802C 
                       I2C6_ICMPR
                               EQU              0xE66E802C
   27 00000000 E66E8030 
                       I2C6_ICHPR



ARM Macro Assembler    Page 9 


                               EQU              0xE66E8030
   28 00000000 E66E8034 
                       I2C6_ICLPR
                               EQU              0xE66E8034
   29 00000000 E66E8038 
                       I2C6_ICFBSCR
                               EQU              0xE66E8038
   30 00000000 E66E803C 
                       I2C6_ICDMAER
                               EQU              0xE66E803C
   31 00000000         
   32 00000000                 END
    9 00000000                 INCLUDE          ../00_include/macro.s
    1 00000000         
    2 00000000         ; Delay
    3 00000000                 macro
    4 00000000                 delay            $amount
    5 00000000                 ldr              r0, = $amount
    6 00000000                 ldr              r1, = 0
    7 00000000         1
    8 00000000                 add              r1, r1, #1
    9 00000000                 cmp              r1, r0
   10 00000000                 bne              %b1
   11 00000000                 mend
   12 00000000         
   13 00000000         ; Dump out x7
   14 00000000                 macro
   15 00000000                 dump32           $addr
   16 00000000                 ldr              r0, = $addr
   17 00000000                 ldr              r1, [r0]
   18 00000000                 str              r1, [x7]
   19 00000000                 add              w7, w7, #4
   20 00000000                 mend
   21 00000000         
   22 00000000         ; Read 32
   23 00000000                 macro
   24 00000000                 ldr32            $addr
   25 00000000                 ldr              r0, = $addr
   26 00000000                 ldr              r1, [r0]
   27 00000000                 mend
   28 00000000         
   29 00000000         ; Read 16
   30 00000000                 macro
   31 00000000                 ldr16            $addr
   32 00000000                 ldrh             r0, = $addr
   33 00000000                 ldrh             r1, [r0]
   34 00000000                 mend
   35 00000000         
   36 00000000         ; Read 8
   37 00000000                 macro
   38 00000000                 ldr8             $addr
   39 00000000                 ldrb             r0, = $addr
   40 00000000                 ldrb             r1, [r0]
   41 00000000                 mend
   42 00000000         
   43 00000000         ; Write 32
   44 00000000                 macro
   45 00000000                 str32            $addr, $data
   46 00000000                 ldr              r0, = $addr



ARM Macro Assembler    Page 10 


   47 00000000                 ldr              r1, = $data
   48 00000000                 str              r1, [r0]
   49 00000000                 mend
   50 00000000         
   51 00000000         ; Write 16
   52 00000000                 macro
   53 00000000                 str16            $addr, $data
   54 00000000                 ldr              r0, = $addr
   55 00000000                 ldr              r1, = $data
   56 00000000                 strh             r1, [r0]
   57 00000000                 mend
   58 00000000         
   59 00000000         ; Write 8
   60 00000000                 macro
   61 00000000                 str8             $addr, $data
   62 00000000                 ldr              r0, = $addr
   63 00000000                 ldr              r1, = $data
   64 00000000                 strb             r1, [r0]
   65 00000000                 mend
   66 00000000         
   67 00000000         ; Wait
   68 00000000                 macro
   69 00000000                 wait32           $addr, $data
   70 00000000                 ldr              r0, = $addr
   71 00000000                 ldr              r2, = $data
   72 00000000         1
   73 00000000                 ldr              r1, [r0]
   74 00000000                 and              r1, r1, r2
   75 00000000                 cmp              r1, r2
   76 00000000                 bne              %b1
   77 00000000                 mend
   78 00000000         
   79 00000000         ; Set a bit
   80 00000000                 macro
   81 00000000                 setb             $addr, $bit_pos
   82 00000000                 ldr              r0, = $addr
   83 00000000                 ldr              r1, [r0]
   84 00000000                 ldr              r2, = 1
   85 00000000                 lsl              r2, $bit_pos
   86 00000000                 orr              r1, r1, r2
   87 00000000                 str              r1, [r0]
   88 00000000                 mend
   89 00000000         
   90 00000000         ; Clear a bit
   91 00000000                 macro
   92 00000000                 clrb             $addr, $bit_pos
   93 00000000                 ldr              r0, = $addr
   94 00000000                 ldr              r1, [r0]
   95 00000000                 ldr              r2, = 1
   96 00000000                 lsl              r2, $bit_pos
   97 00000000                 mvn              r2, r2
   98 00000000                 and              r1, r1, r2
   99 00000000                 str              r1, [r0]
  100 00000000                 mend
  101 00000000         
  102 00000000                 end
   10 00000000                 include          gic.s
    1 00000000         
    2 00000000                 MACRO



ARM Macro Assembler    Page 11 


    3 00000000                 GIC_SETTING_CR52 $int_source
    4 00000000         
    5 00000000                 LCLS             src
    6 00000000         src     SETS             "$int_source"
    7 00000000         
    8 00000000         ;Read IMP_CBAR -> R2
    9 00000000         ;R2: GICD base address
   10 00000000                 MRC              p15, 1, R2, c15, c3, 0
   11 00000000         
   12 00000000         ;GICR_WAKER CHECK
   13 00000000         ; 1. read
   14 00000000         ;  Redistributor page 0
   15 00000000                 ADD              R1, R2, #0x100000
   16 00000000         ;  Write 0
   17 00000000         1       MOV              R0, #0
   18 00000000                 STR              R0, [R1,#0x14]
   19 00000000         ;  Check
   20 00000000                 LDR              R0, [R1,#0x14]
   21 00000000                 LDR              R3, =0xFFFFFFFF
   22 00000000                 ANDS             R0, R0, R3
   23 00000000                 BNE              %1
   24 00000000         
   25 00000000         ;Priority mask
   26 00000000                 MOV              R0, #0xFC   ; GICC_PMR
   27 00000000                 MCR              p15,0,R0,c4,c6,0 ; Write Rt to 
                                                            ICC_PMR
   28 00000000         
   29 00000000         ;Priority set
   30 00000000                 LDR              R0, =0x00000400+(($src)/4)*4
   31 00000000                 ADD              R1, R2, R0
   32 00000000                 LDR              R0, =0x00000000
   33 00000000                 STR              R0, [R1]
   34 00000000         
   35 00000000         ;GICD_IGROUPR -> GROUP 1
   36 00000000                 LDR              R0, =0x00000080+(($src)/32)*4
   37 00000000                 ADD              R1, R2, R0
   38 00000000                 LDR              R0, =0x1<<(($src)&0x1F)
   39 00000000                 STR              R0, [R1]
   40 00000000         
   41 00000000         ;Enable
   42 00000000                 LDR              R0, =0x00000100+(($src)/32)*4
   43 00000000                 ADD              R1, R2, R0
   44 00000000                 LDR              R0, =0x1<<(($src)&0x1F)
   45 00000000                 STR              R0, [R1]
   46 00000000         
   47 00000000         ;Level sensitive
   48 00000000                 LDR              R0, =0x00000C00+(($src)/16)*4 
                                                            ; ICDICFGR
   49 00000000                 ADD              R1, R2, R0
   50 00000000                 LDR              R0, =0x2<<(($src)&0x0F)*2
   51 00000000         ;LDR     R0, =0x0<<(($src)&0x0F)*2 ; For testing
   52 00000000                 STR              R0, [R1]
   53 00000000                 LDR              R0, [R1]
   54 00000000         
   55 00000000         ;Enable GICD
   56 00000000                 LDR              R0, =0x00000000 ; ICCDCR
   57 00000000                 ADD              R1, R2, R0
   58 00000000                 LDR              R0, =0x00000003
   59 00000000                 STR              R0, [R1]



ARM Macro Assembler    Page 12 


   60 00000000         
   61 00000000         ;Enable GICI
   62 00000000         
   63 00000000                 MRC              p15,0,R0,c12,c12,7 ; Read to IC
                                                            C_IGRPEN1 to R0
   64 00000000                 LDR              R1, =0x00000003
   65 00000000                 ORR              R0, R0, R1  ; Set bit[1:0]
   66 00000000                 MCR              p15,0,R0,c12,c12,7 ; Write Rt t
                                                            o ICC_IGRPEN1
   67 00000000         
   68 00000000                 MEND
   69 00000000         
   70 00000000                 MACRO
   71 00000000                 GIC_CHECK_CR52   $int_source, $fail_addr
   72 00000000         
   73 00000000                 LCLS             src
   74 00000000         src     SETS             "$int_source"
   75 00000000         
   76 00000000         ;Read IAR1 to R2
   77 00000000                 MRC              p15,0,R2,c12,c12,0 ; Read ICC_I
                                                            AR1 into Rt
   78 00000000         
   79 00000000         ;Dump -> assumpe that R7 content dump address
   80 00000000                 STR              R2, [R7, #0]
   81 00000000                 ADD              R7, R7, #4
   82 00000000         
   83 00000000         ;Compare
   84 00000000                 LDR              r1, =$src
   85 00000000                 CMP              r1, r2
   86 00000000                 BNE              $fail_addr
   87 00000000         
   88 00000000         ;EOIR
   89 00000000                 MCR              p15,0,R2,c12,c12,1 ; Write Rt t
                                                            o ICC_EOIR1
   90 00000000         
   91 00000000         ;Read IMP_CBAR -> R2
   92 00000000         ;R2: GICD base address
   93 00000000                 MRC              p15, 1, R3, c15, c3, 0
   94 00000000         
   95 00000000         ;Disabale source
   96 00000000                 LDR              R0, =0x00000180+(($src)/32)*4
   97 00000000                 ADD              R1, R3, R0
   98 00000000                 LDR              R0, =0x1<<(($src)&0x1F)
   99 00000000                 STR              R0, [R1]
  100 00000000         
  101 00000000         ;Clear pending SPI
  102 00000000         ;LDR     R0, =0x00000280+(($src)/32)*4
  103 00000000         ;ADD     R1, R3, R0
  104 00000000         ;LDR     R0, =0x1<<(($src)&0x1F)
  105 00000000         ;STR     R0, [R1]
  106 00000000         
  107 00000000         ;CHECK
  108 00000000                 MRC              p15,0,R2,c12,c12,0 ; Read ICC_I
                                                            AR1 into Rt
  109 00000000         
  110 00000000                 LDR              r3, =0x000003FF
  111 00000000                 CMP              r3, r2
  112 00000000                 BNE              $fail_addr
  113 00000000         



ARM Macro Assembler    Page 13 


  114 00000000                 MEND
  115 00000000         
  116 00000000                 MACRO
  117 00000000                 INT_WAIT_CR52    $int_source
  118 00000000                 LCLS             src
  119 00000000         src     SETS             "$int_source"
  120 00000000         ;R2: GICD base address
  121 00000000         3       MRC              p15, 1, R2, c15, c3, 0
  122 00000000                 LDR              R0, =0x00000100+(($src)/32)*4
  123 00000000                 ADD              R1, R2, R0
  124 00000000                 LDR              R0, =0x1<<(($src)&0x1F)
  125 00000000                 LDR              R3, [R1]
  126 00000000                 AND              R3, R3, R0
  127 00000000                 CMP              R0, R3
  128 00000000                 BEQ              %3
  129 00000000                 MEND
  130 00000000         
  131 00000000         
  132 00000000                 end
   11 00000000         
   12 00000000 0000010E 
                       INTID   equ              0x10e
   13 00000000         ;INTID   equ 0x10f
   14 00000000         ;INTID   equ 0x110
   15 00000000         ;INTID   equ 0x111
   16 00000000         ;INTID   equ 0x112
   17 00000000         ;INTID   equ 0x113
   18 00000000         ;INTID   equ 0x114
   19 00000000         
   20 00000000 A55A0101 
                       I2C_MODEL_CTRL
                               equ              0xa55a0101
   21 00000000         
   22 00000000                 area             VECTORS, code, readonly
   23 00000000                 entry
   24 00000000         
   25 00000000         ;*******************************************************
                       ***********************
   26 00000000         
   27 00000000         vector_start
   28 00000000         
   29 00000000 E59FF018        ldr              pc, Reset_Addr ; 0x00
   30 00000004 E59FF018        ldr              pc, Undefined_Addr ; 0x04
   31 00000008 E59FF018        ldr              pc, SupervisorCall_Addr ; 0x08
   32 0000000C E59FF018        ldr              pc, PrefetchAbort_Addr ; 0x0c
   33 00000010 E59FF018        ldr              pc, DataAbort_Addr ; 0x10
   34 00000014 E320F000        nop                          ; 0x14
   35 00000018 E59FF014        ldr              pc, IRQ_Addr ; 0x18
   36 0000001C         FIQ_Addr                             ; 0x1c
   37 0000001C EAFFFFFE        b                FIQ_Addr
   38 00000020         
   39 00000020 00000000 
                       Reset_Addr
                               dcd              Reset_Handler
   40 00000024 00000000 
                       Undefined_Addr
                               dcd              UndefinedInstruction_Handler
   41 00000028 00000000 
                       SupervisorCall_Addr



ARM Macro Assembler    Page 14 


                               dcd              SupervisorCall_Handler
   42 0000002C 00000000 
                       PrefetchAbort_Addr
                               dcd              PrefetchAbort_Handler
   43 00000030 00000000 
                       DataAbort_Addr
                               dcd              DataAbort_Handler
   44 00000034 00000000 
                       IRQ_Addr
                               dcd              IRQ_Handler
   45 00000038         
   46 00000038         vector_end
   47 00000038         
   48 00000038         ;*******************************************************
                       ***********************
   49 00000038         
   50 00000038         Reset_Handler
   51 00000038         
   52 00000038         ; Initialize MPU
   53 00000038                 include          mpu_init.s
    1 00000038         
    2 00000038         ;*******************************************************
                       ***********************
    3 00000038         ; ARM MPU intialization.
    4 00000038         ; 2082 - Hau Sy Le - hau.le.eb@renesas.com
    5 00000038         ;*******************************************************
                       ***********************
    6 00000038         
    7 00000038         ; HPRBAR.SH
    8 00000038 00000003 
                       SH_POS  equ              3
    9 00000038 00000000 
                       NON_SHAREABLE
                               equ              (0 << SH_POS)
   10 00000038 00000010 
                       OUT_SHAREABLE
                               equ              (2 << SH_POS)
   11 00000038 00000018 
                       IN_SHAREABLE
                               equ              (3 << SH_POS)
   12 00000038         
   13 00000038         ; HPRBAR.AP
   14 00000038 00000001 
                       AP_POS  equ              1
   15 00000038 00000000 
                       RW_EL2  equ              (0 << AP_POS)
   16 00000038 00000002 
                       RW      equ              (1 << AP_POS)
   17 00000038 00000004 
                       RO_EL2  equ              (2 << AP_POS)
   18 00000038 00000006 
                       RO      equ              (3 << AP_POS)
   19 00000038         
   20 00000038         ; HPRBAR.XN
   21 00000038 00000000 
                       XN_POS  equ              0
   22 00000038 00000001 
                       EXECUTE_NEVER
                               equ              (1 << XN_POS)



ARM Macro Assembler    Page 15 


   23 00000038 00000000 
                       EXECUTABLE
                               equ              (0 << XN_POS)
   24 00000038         
   25 00000038         ; HPRLAR.AttrIndx
   26 00000038 00000001 
                       AttrIndx_POS
                               equ              1
   27 00000038 00000000 
                       ATTR0   equ              (0 << AttrIndx_POS)
   28 00000038 00000002 
                       ATTR1   equ              (1 << AttrIndx_POS)
   29 00000038 00000004 
                       ATTR2   equ              (2 << AttrIndx_POS)
   30 00000038 00000006 
                       ATTR3   equ              (3 << AttrIndx_POS)
   31 00000038 00000008 
                       ATTR4   equ              (4 << AttrIndx_POS)
   32 00000038 0000000A 
                       ATTR5   equ              (5 << AttrIndx_POS)
   33 00000038 0000000C 
                       ATTR6   equ              (6 << AttrIndx_POS)
   34 00000038 0000000E 
                       ATTR7   equ              (7 << AttrIndx_POS)
   35 00000038 00000010 
                       ATTR8   equ              (8 << AttrIndx_POS)
   36 00000038 00000012 
                       ATTR9   equ              (9 << AttrIndx_POS)
   37 00000038 00000014 
                       ATTR30  equ              (10 << AttrIndx_POS)
   38 00000038 00000016 
                       ATTR31  equ              (11 << AttrIndx_POS)
   39 00000038 00000018 
                       ATTR32  equ              (12 << AttrIndx_POS)
   40 00000038 0000001A 
                       ATTR33  equ              (13 << AttrIndx_POS)
   41 00000038 0000001C 
                       ATTR34  equ              (14 << AttrIndx_POS)
   42 00000038 0000001E 
                       ATTR35  equ              (15 << AttrIndx_POS)
   43 00000038         
   44 00000038         ; HPRLAR.EN
   45 00000038 00000000 
                       EN_POS  equ              0
   46 00000038 00000001 
                       REGION_ENABLE
                               equ              (1 << EN_POS)
   47 00000038         
   48 00000038         ;    area    MPU_INIT, code, readonly
   49 00000038         ;    
   50 00000038         ;    export  __mpu_init
   51 00000038         ;    export  __mpu_init_el1
   52 00000038         ;
   53 00000038         ;    entry
   54 00000038         
   55 00000038         __mpu_init
   56 00000038         
   57 00000038         ; Define memory regions attribute
   58 00000038         ; Attribute 0: 0xff Normal, Outer write-back non-transie



ARM Macro Assembler    Page 16 


                       nt, RW allocate, Inner write-back non-transient
   59 00000038         ; Attribute 1: 0x04 Device, nGnRE
   60 00000038         ; Attribute 2: 0x44 Normal, Outer non-cacheable, Inner n
                       on-cacheable
   61 00000038         ; Attribute 3: 0x00 Device, nGnRnE
   62 00000038 E59F021C        ldr              r0, = 0x004404ff
   63 0000003C EE8A0F12        mcr              p15, 4, r0, c10, c2, 0
   64 00000040 E59F0218        ldr              r0, = 0xddeebb00
   65 00000044 EE8A0F32        mcr              p15, 4, r0, c10, c2, 1
   66 00000048         
   67 00000048         ; BSC
   68 00000048 E3A00000        mov              r0, #0
   69 0000004C EE860F32        mcr              p15, 4, r0, c6, c2, 1
   70 00000050 E3A00002        ldr              r0, = (0x00000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
   71 00000054 EE860F13        mcr              p15, 4, r0, c6, c3, 0
   72 00000058 E59F0204        ldr              r0, = (0x07ffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
   73 0000005C EE860F33        mcr              p15, 4, r0, c6, c3, 1
   74 00000060         
   75 00000060         ; RPC
   76 00000060 E3A00001        mov              r0, #1
   77 00000064 EE860F32        mcr              p15, 4, r0, c6, c2, 1
   78 00000068 E3A00382        ldr              r0, = (0x08000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
   79 0000006C EE860F13        mcr              p15, 4, r0, c6, c3, 0
   80 00000070 E59F01F0        ldr              r0, = (0x0fffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
   81 00000074 EE860F33        mcr              p15, 4, r0, c6, c3, 1
   82 00000078         
   83 00000078         ; BSC
   84 00000078 E3A00002        mov              r0, #2
   85 0000007C EE860F32        mcr              p15, 4, r0, c6, c2, 1
   86 00000080 E3A00221        ldr              r0, = (0x10000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
   87 00000084 EE860F13        mcr              p15, 4, r0, c6, c3, 0
   88 00000088 E59F01DC        ldr              r0, = (0x1fffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
   89 0000008C EE860F33        mcr              p15, 4, r0, c6, c3, 1
   90 00000090         
   91 00000090         ; RPC
   92 00000090 E3A00003        mov              r0, #3
   93 00000094 EE860F32        mcr              p15, 4, r0, c6, c2, 1
   94 00000098 E3A00222        ldr              r0, = (0x20000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
   95 0000009C EE860F13        mcr              p15, 4, r0, c6, c3, 0
   96 000000A0 E3E001FB        ldr              r0, = (0x3fffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
   97 000000A4 EE860F33        mcr              p15, 4, r0, c6, c3, 1
   98 000000A8         
   99 000000A8         ; SDRAM
  100 000000A8 E3A00004        mov              r0, #4
  101 000000AC EE860F32        mcr              p15, 4, r0, c6, c2, 1
  102 000000B0 E3A00109        ldr              r0, = (0x40000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  103 000000B4 EE860F13        mcr              p15, 4, r0, c6, c3, 0
  104 000000B8 E3E001F9        ldr              r0, = (0xbfffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  105 000000BC EE860F33        mcr              p15, 4, r0, c6, c3, 1



ARM Macro Assembler    Page 17 


  106 000000C0         
  107 000000C0         ; PCIE
  108 000000C0 E3A00005        mov              r0, #5
  109 000000C4 EE860F32        mcr              p15, 4, r0, c6, c2, 1
  110 000000C8 E3A0010B        ldr              r0, = (0xc0000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  111 000000CC EE860F13        mcr              p15, 4, r0, c6, c3, 0
  112 000000D0 E59F0198        ldr              r0, = (0xdfffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  113 000000D4 EE860F33        mcr              p15, 4, r0, c6, c3, 1
  114 000000D8         
  115 000000D8         ; Peripheral
  116 000000D8 E3A00006        mov              r0, #6
  117 000000DC EE860F32        mcr              p15, 4, r0, c6, c2, 1
  118 000000E0 E3A0022E        ldr              r0, = (0xe0000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  119 000000E4 EE860F13        mcr              p15, 4, r0, c6, c3, 0
  120 000000E8 E59F0184        ldr              r0, = (0xe62fffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  121 000000EC EE860F33        mcr              p15, 4, r0, c6, c3, 1
  122 000000F0         
  123 000000F0         ; SRAM
  124 000000F0 E3A00007        mov              r0, #7
  125 000000F4 EE860F32        mcr              p15, 4, r0, c6, c2, 1
  126 000000F8 E59F0178        ldr              r0, = (0xe6300000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  127 000000FC EE860F13        mcr              p15, 4, r0, c6, c3, 0
  128 00000100 E59F0174        ldr              r0, = (0xe63fffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  129 00000104 EE860F33        mcr              p15, 4, r0, c6, c3, 1
  130 00000108         
  131 00000108         ; Peripheral
  132 00000108 E3A00008        mov              r0, #8
  133 0000010C EE860F32        mcr              p15, 4, r0, c6, c2, 1
  134 00000110 E59F0168        ldr              r0, = (0xe6400000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  135 00000114 EE860F13        mcr              p15, 4, r0, c6, c3, 0
  136 00000118 E59F0164        ldr              r0, = (0xeb0fffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  137 0000011C EE860F33        mcr              p15, 4, r0, c6, c3, 1
  138 00000120         
  139 00000120         ; SecROM
  140 00000120 E3A00009        mov              r0, #9
  141 00000124 EE860F32        mcr              p15, 4, r0, c6, c2, 1
  142 00000128 E59F0158        ldr              r0, = (0xeb100000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  143 0000012C EE860F13        mcr              p15, 4, r0, c6, c3, 0
  144 00000130 E59F0154        ldr              r0, = (0xeb3fffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  145 00000134 EE860F33        mcr              p15, 4, r0, c6, c3, 1
  146 00000138         
  147 00000138         ; Peripheral
  148 00000138 E3A0000A        mov              r0, #10
  149 0000013C EE860F32        mcr              p15, 4, r0, c6, c2, 1
  150 00000140 E59F0148        ldr              r0, = (0xeb400000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  151 00000144 EE860F13        mcr              p15, 4, r0, c6, c3, 0
  152 00000148 E59F0144        ldr              r0, = (0xecffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE



ARM Macro Assembler    Page 18 


  153 0000014C EE860F33        mcr              p15, 4, r0, c6, c3, 1
  154 00000150         
  155 00000150         ; IMP RAM
  156 00000150 E3A0000B        mov              r0, #11
  157 00000154 EE860F32        mcr              p15, 4, r0, c6, c2, 1
  158 00000158 E59F0138        ldr              r0, = (0xed000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  159 0000015C EE860F13        mcr              p15, 4, r0, c6, c3, 0
  160 00000160 E59F0134        ldr              r0, = (0xedffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  161 00000164 EE860F33        mcr              p15, 4, r0, c6, c3, 1
  162 00000168         
  163 00000168         ; Peripheral
  164 00000168 E3A0000C        mov              r0, #12
  165 0000016C EE860F32        mcr              p15, 4, r0, c6, c2, 1
  166 00000170 E59F0128        ldr              r0, = (0xee000000 :and: (:not:(
0x1 << 5))) :or: NON_SHAREABLE :or: RW
  167 00000174 EE860F13        mcr              p15, 4, r0, c6, c3, 0
  168 00000178 E3E00038        ldr              r0, = (0xffffffff :and: (:not:(
0x3f) :and: (:not:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  169 0000017C EE860F33        mcr              p15, 4, r0, c6, c3, 1
  170 00000180         
  171 00000180         ; Enable EL2 MPU
  172 00000180 EE910F10        mrc              p15, 4, r0, c1, c0, 0
  173 00000184 E3800001        orr              r0, r0, #0x1
  174 00000188 F57FF04F        dsb
  175 0000018C EE810F10        mcr              p15, 4, r0, c1, c0, 0
  176 00000190 F57FF06F        isb
  177 00000194         
  178 00000194         ;    bx  lr
  179 00000194         
  180 00000194         __mpu_init_el1
  181 00000194         
  182 00000194         ;    ; Define memory regions attribute
  183 00000194         ;    ; Attribute 0: 0xff Normal, Outer write-back non-tr
                       ansient, RW allocate, Inner write-back non-transient
  184 00000194         ;    ; Attribute 1: 0x04 Device, nGnRE
  185 00000194         ;    ; Attribute 2: 0x44 Normal, Outer non-cacheable, In
                       ner non-cacheable
  186 00000194         ;    ldr r0, = 0x444404ff
  187 00000194         ;    mcr p15, 4, r0, c10, c2, 0
  188 00000194         ;    ldr r0, = 0xddeebb00
  189 00000194         ;    mcr p15, 4, r0, c10, c2, 1
  190 00000194         ;
  191 00000194         ;    ; BSC
  192 00000194         ;    mov r0, #0
  193 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  194 00000194         ;    ldr r0, = (0x00000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  195 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  196 00000194         ;    ldr r0, = (0x07ffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  197 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  198 00000194         ;
  199 00000194         ;    ; RPC
  200 00000194         ;    mov r0, #1
  201 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  202 00000194         ;    ldr r0, = (0x08000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW



ARM Macro Assembler    Page 19 


  203 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  204 00000194         ;    ldr r0, = (0x0fffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  205 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  206 00000194         ;
  207 00000194         ;    ; BSC
  208 00000194         ;    mov r0, #2
  209 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  210 00000194         ;    ldr r0, = (0x10000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  211 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  212 00000194         ;    ldr r0, = (0x1fffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  213 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  214 00000194         ;
  215 00000194         ;    ; RPC
  216 00000194         ;    mov r0, #3
  217 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  218 00000194         ;    ldr r0, = (0x20000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  219 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  220 00000194         ;    ldr r0, = (0x3fffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  221 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  222 00000194         ;
  223 00000194         ;    ; SDRAM
  224 00000194         ;    mov r0, #4
  225 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  226 00000194         ;    ldr r0, = (0x40000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  227 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  228 00000194         ;    ldr r0, = (0xbfffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  229 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  230 00000194         ;
  231 00000194         ;    ; PCIE
  232 00000194         ;    mov r0, #5
  233 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  234 00000194         ;    ldr r0, = (0xc0000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  235 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  236 00000194         ;    ldr r0, = (0xdfffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  237 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  238 00000194         ;
  239 00000194         ;    ; Peripheral
  240 00000194         ;    mov r0, #6
  241 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  242 00000194         ;    ldr r0, = (0xe0000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  243 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  244 00000194         ;    ldr r0, = (0xe62fffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  245 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  246 00000194         ;
  247 00000194         ;    ; SRAM
  248 00000194         ;    mov r0, #7
  249 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  250 00000194         ;    ldr r0, = (0xe6300000 :and: (:not:(0x1 << 5))) :or:



ARM Macro Assembler    Page 20 


                        NON_SHAREABLE :or: RW
  251 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  252 00000194         ;    ldr r0, = (0xe63fffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  253 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  254 00000194         ;
  255 00000194         ;    ; Peripheral
  256 00000194         ;    mov r0, #8
  257 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  258 00000194         ;    ldr r0, = (0xe6400000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  259 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  260 00000194         ;    ldr r0, = (0xeb0fffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  261 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  262 00000194         ;
  263 00000194         ;    ; SecROM
  264 00000194         ;    mov r0, #9
  265 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  266 00000194         ;    ldr r0, = (0xeb100000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  267 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  268 00000194         ;    ldr r0, = (0xeb3fffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  269 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  270 00000194         ;
  271 00000194         ;    ; Peripheral
  272 00000194         ;    mov r0, #10
  273 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  274 00000194         ;    ldr r0, = (0xeb400000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  275 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  276 00000194         ;    ldr r0, = (0xecffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  277 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  278 00000194         ;
  279 00000194         ;    ; IMP RAM
  280 00000194         ;    mov r0, #11
  281 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  282 00000194         ;    ldr r0, = (0xed000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  283 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  284 00000194         ;    ldr r0, = (0xedffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR0 :or: REGION_ENABLE
  285 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  286 00000194         ;
  287 00000194         ;    ; Peripheral
  288 00000194         ;    mov r0, #12
  289 00000194         ;    mcr p15, 0, r0, c6, c2, 1
  290 00000194         ;    ldr r0, = (0xee000000 :and: (:not:(0x1 << 5))) :or:
                        NON_SHAREABLE :or: RW
  291 00000194         ;    mcr p15, 0, r0, c6, c3, 0
  292 00000194         ;    ldr r0, = (0xffffffff :and: (:not:(0x3f) :and: (:no
                       t:(0x3 << 4)))) :or: ATTR3 :or: REGION_ENABLE
  293 00000194         ;    mcr p15, 0, r0, c6, c3, 1
  294 00000194         ;
  295 00000194         ;    ; Enable EL2 MPU
  296 00000194         ;    mrc p15, 0, r0, c1, c0, 0
  297 00000194         ;    orr r0, r0, #0x1



ARM Macro Assembler    Page 21 


  298 00000194         ;    dsb
  299 00000194         ;    mcr p15, 0, r0, c1, c0, 0
  300 00000194         ;    isb
  301 00000194         
  302 00000194         ;    bx  lr
  303 00000194         
  304 00000194                 end
   54 00000194         
   55 00000194         ; Only for DN3
   56 00000194                 include          dbsc_init.s
    1 00000194         
    2 00000194         __dbsc_init
    3 00000194         
    4 00000194 E59F0108        ldr              r0, = 0xe67f0024
    5 00000198 E3A01001        ldr              r1, = 1
    6 0000019C E5801000        str              r1, [r0]
    7 000001A0         
    8 000001A0 E59F0100        ldr              r0, = 0xe6790100
    9 000001A4 E3011234        ldr              r1, = 0x1234
   10 000001A8 E5801000        str              r1, [r0]
   11 000001AC         
   12 000001AC E59F00F8        ldr              r0, = 0xe6790108
   13 000001B0 E3011234        ldr              r1, = 0x1234
   14 000001B4 E5801000        str              r1, [r0]
   15 000001B8         
   16 000001B8 E59F00F0        ldr              r0, = 0xe6798100
   17 000001BC E3011234        ldr              r1, = 0x1234
   18 000001C0 E5801000        str              r1, [r0]
   19 000001C4         
   20 000001C4 E59F00E8        ldr              r0, = 0xe6798108
   21 000001C8 E3011234        ldr              r1, = 0x1234
   22 000001CC E5801000        str              r1, [r0]
   23 000001D0         
   24 000001D0 E59F00E0        ldr              r0, = 0xe6797400
   25 000001D4 E3A01001        ldr              r1, = 1
   26 000001D8 E5801000        str              r1, [r0]
   27 000001DC         
   28 000001DC E59F00D8        ldr              r0, = 0xe679f400
   29 000001E0 E3A01001        ldr              r1, = 1
   30 000001E4 E5801000        str              r1, [r0]
   31 000001E8         
   32 000001E8                 end
   57 000001E8         
   58 000001E8         ; Copy vector table from external memory into SRAM
   59 000001E8 E59F00D0        ldr              r0, = vector_start ; Start
   60 000001EC E59F10D0        ldr              r1, = vector_end ; End
   61 000001F0 E0411000        sub              r1, r1, r0  ; Length
   62 000001F4 E59F20CC        ldr              r2, = 0xe6300000 ; Destination 
                                                            = 0xe6300000
   63 000001F8         vector_copy
   64 000001F8 E8B000F0        ldmia            r0!, {r4-r7}
   65 000001FC E8A200F0        stmia            r2!, {r4-r7}
   66 00000200 E2511010        subs             r1, r1, #0x10
   67 00000204 8AFFFFFB        bhi              vector_copy
   68 00000208         
   69 00000208         ; Copy exception handler from external memory into SRAM
   70 00000208 E59F00BC        ldr              r0, = exc_start ; Start
   71 0000020C E59F10BC        ldr              r1, = exc_end ; End
   72 00000210 E0411000        sub              r1, r1, r0  ; Length



ARM Macro Assembler    Page 22 


   73 00000214 E59F20AC        ldr              r2, = 0xe6300000
   74 00000218 E0822000        add              r2, r2, r0  ; Destination = 0xe
                                                            6300000 + exc_start
                                                            
   75 0000021C         exc_copy
   76 0000021C E8B000F0        ldmia            r0!, {r4-r7}
   77 00000220 E8A200F0        stmia            r2!, {r4-r7}
   78 00000224 E2511010        subs             r1, r1, #0x10
   79 00000228 8AFFFFFB        bhi              exc_copy
   80 0000022C         
   81 0000022C         ; Copy main from external memory into SRAM
   82 0000022C E59F00A0        ldr              r0, = main_start ; Start
   83 00000230 E59F10A0        ldr              r1, = main_end ; End
   84 00000234 E0411000        sub              r1, r1, r0  ; Length
   85 00000238 E59F2088        ldr              r2, = 0xe6300000
   86 0000023C E0822000        add              r2, r2, r0  ; Destination = 0xe
                                                            6300000 + main_star
                                                            t
   87 00000240 E1A03002        mov              r3, r2
   88 00000244         main_copy
   89 00000244 E8B000F0        ldmia            r0!, {r4-r7}
   90 00000248 E8A200F0        stmia            r2!, {r4-r7}
   91 0000024C E2511010        subs             r1, r1, #0x10
   92 00000250 8AFFFFFB        bhi              main_copy
   93 00000254         
   94 00000254         ; Jump to main in SRAM
   95 00000254 E1A0F003        mov              pc, r3      ; current r3 = 0xe6
                                                            300000 + main_start
                                                            
   96 00000258         
   97 00000258         ;*******************************************************
                       ***********************
   98 00000258         
   99 00000258         main_start
  100 00000258         
  101 00000258 EA00001F        b                start_ltorg
  102 0000025C 004404FF 
              DDEEBB00 
              07FFFFC1 
              0FFFFFC1 
              1FFFFFC1 
              DFFFFFC1 
              E62FFFC7 
              E6300002 
              E63FFFC1 
              E6400002 
              EB0FFFC7 
              EB100002 
              EB3FFFC1 
              EB400002 
              ECFFFFC7 
              ED000002 
              EDFFFFC1 
              EE000002 
              E67F0024 
              E6790100 
              E6790108 
              E6798100 
              E6798108 



ARM Macro Assembler    Page 23 


              E6797400 
              E679F400 
              00000000 
              00000000 
              E6300000 
              00000000 
              00000000 
              00000000 
              00000000         ltorg
  103 000002DC         start_ltorg
  104 000002DC         
  105 000002DC         ; Enable CR52_BAREN
  106 000002DC         ;ldr r10, = 0xcafecafe
  107 000002DC E3A00FCD        mov              r0, #0x0334
  108 000002E0 E34E0617        movt             r0, #0xe617
  109 000002E4 E3A01000        mov              r1, #0
  110 000002E8 E34E1630        movt             r1, #0xe630
  111 000002EC E5801000        str              r1, [r0]
  112 000002F0 E3811010        orr              r1, r1, #0x10
  113 000002F4 E5801000        str              r1, [r0]
  114 000002F8         
  115 000002F8 F1080080        CPSIE            i
  116 000002FC                 GIC_SETTING_CR52 INTID
    4 000002FC         
    5 000002FC                 LCLS             src
    6 000002FC INTID   src     SETS             "INTID"
    7 000002FC         
    8 000002FC         ;Read IMP_CBAR -> R2
    9 000002FC         ;R2: GICD base address
   10 000002FC EE3F2F13        MRC              p15, 1, R2, c15, c3, 0
   11 00000300         
   12 00000300         ;GICR_WAKER CHECK
   13 00000300         ; 1. read
   14 00000300         ;  Redistributor page 0
   15 00000300 E2821601        ADD              R1, R2, #0x100000
   16 00000304         ;  Write 0
   17 00000304 E3A00000 
                       1       MOV              R0, #0
   18 00000308 E5810014        STR              R0, [R1,#0x14]
   19 0000030C         ;  Check
   20 0000030C E5910014        LDR              R0, [R1,#0x14]
   21 00000310 E3E03000        LDR              R3, =0xFFFFFFFF
   22 00000314 E0100003        ANDS             R0, R0, R3
   23 00000318 1AFFFFF9        BNE              %1
   24 0000031C         
   25 0000031C         ;Priority mask
   26 0000031C E3A000FC        MOV              R0, #0xFC   ; GICC_PMR
   27 00000320 EE040F16        MCR              p15,0,R0,c4,c6,0 ; Write Rt to 
                                                            ICC_PMR
   28 00000324         
   29 00000324         ;Priority set
   30 00000324 E300050C        LDR              R0, =0x00000400+((INTID)/4)*4
   31 00000328 E0821000        ADD              R1, R2, R0
   32 0000032C E3A00000        LDR              R0, =0x00000000
   33 00000330 E5810000        STR              R0, [R1]
   34 00000334         
   35 00000334         ;GICD_IGROUPR -> GROUP 1
   36 00000334 E3A000A0        LDR              R0, =0x00000080+((INTID)/32)*4
   37 00000338 E0821000        ADD              R1, R2, R0



ARM Macro Assembler    Page 24 


   38 0000033C E3A00901        LDR              R0, =0x1<<((INTID)&0x1F)
   39 00000340 E5810000        STR              R0, [R1]
   40 00000344         
   41 00000344         ;Enable
   42 00000344 E3A00E12        LDR              R0, =0x00000100+((INTID)/32)*4
   43 00000348 E0821000        ADD              R1, R2, R0
   44 0000034C E3A00901        LDR              R0, =0x1<<((INTID)&0x1F)
   45 00000350 E5810000        STR              R0, [R1]
   46 00000354         
   47 00000354         ;Level sensitive
   48 00000354 E3A00D31        LDR              R0, =0x00000C00+((INTID)/16)*4 
                                                            ; ICDICFGR
   49 00000358 E0821000        ADD              R1, R2, R0
   50 0000035C E3A00202        LDR              R0, =0x2<<((INTID)&0x0F)*2
   51 00000360         ;LDR     R0, =0x0<<(($src)&0x0F)*2 ; For testing
   52 00000360 E5810000        STR              R0, [R1]
   53 00000364 E5910000        LDR              R0, [R1]
   54 00000368         
   55 00000368         ;Enable GICD
   56 00000368 E3A00000        LDR              R0, =0x00000000 ; ICCDCR
   57 0000036C E0821000        ADD              R1, R2, R0
   58 00000370 E3A00003        LDR              R0, =0x00000003
   59 00000374 E5810000        STR              R0, [R1]
   60 00000378         
   61 00000378         ;Enable GICI
   62 00000378         
   63 00000378 EE1C0FFC        MRC              p15,0,R0,c12,c12,7 ; Read to IC
                                                            C_IGRPEN1 to R0
   64 0000037C E3A01003        LDR              R1, =0x00000003
   65 00000380 E1800001        ORR              R0, R0, R1  ; Set bit[1:0]
   66 00000384 EE0C0FFC        MCR              p15,0,R0,c12,c12,7 ; Write Rt t
                                                            o ICC_IGRPEN1
   67 00000388         
  117 00000388         ;    GIC_SETTING_CR52 0x10f
  118 00000388         ;    GIC_SETTING_CR52 0x110
  119 00000388         ;    GIC_SETTING_CR52 0x111
  120 00000388         ;    GIC_SETTING_CR52 0x112
  121 00000388         ;    GIC_SETTING_CR52 0x113
  122 00000388         ;    GIC_SETTING_CR52 0x114
  123 00000388         
  124 00000388         ; Begining address of dump area
  125 00000388 E3A07301        ldr              r7, = 0x04000000
  126 0000038C         
  127 0000038C         ; Configure LSI pins
  128 0000038C E30F1FFC        ldr              r1, = 0x0000fffc
  129 00000390 E1E02001        mvn              r2, r1
  130 00000394 E59F0100        ldr              r0, = 0xe6050800 ; PMMR_GP2
  131 00000398 E5802000        str              r2, [r0]
  132 0000039C E59F00FC        ldr              r0, = 0xe6050900 ; MOD_SEL_GP2
  133 000003A0 E5801000        str              r1, [r0]
  134 000003A4 E59FA0F8        ldr              r10, = I2C_MODEL_CTRL
  135 000003A8         
  136 000003A8         ; Configure I2C0 as master device in TX mode
  137 000003A8                 str32            I2C0_ICCCR, 0x0000001E 
                                                            ; SCGD = 3, CDF = 6
                                                            
   46 000003A8 E59F00F8        ldr              r0, = I2C0_ICCCR
   47 000003AC E3A0101E        ldr              r1, = 0x0000001E
   48 000003B0 E5801000        str              r1, [r0]



ARM Macro Assembler    Page 25 


  138 000003B4                 str32            I2C0_ICMAR, 0x00000012 ; Slave 
                                                            address = 0x11
   46 000003B4 E59F00F0        ldr              r0, = I2C0_ICMAR
   47 000003B8 E3A01012        ldr              r1, = 0x00000012
   48 000003BC E5801000        str              r1, [r0]
  139 000003C0                 str32            I2C0_ICMSR, 0x00000000
   46 000003C0 E59F00E8        ldr              r0, = I2C0_ICMSR
   47 000003C4 E3A01000        ldr              r1, = 0x00000000
   48 000003C8 E5801000        str              r1, [r0]
  140 000003CC                 str32            I2C0_ICCCR, 0x0000001E ; SCGD =
                                                             3, CDF = 6; f = 40
                                                            0kHz
   46 000003CC E59F00D4        ldr              r0, = I2C0_ICCCR
   47 000003D0 E3A0101E        ldr              r1, = 0x0000001E
   48 000003D4 E5801000        str              r1, [r0]
  141 000003D8                 str32            I2C0_ICMIER, (0x1 << 6) ; MNRE
   46 000003D8 E59F00D4        ldr              r0, = I2C0_ICMIER
   47 000003DC E3A01040        ldr              r1, = (0x1 << 6)
   48 000003E0 E5801000        str              r1, [r0]
  142 000003E4         
  143 000003E4         ; Configure I2C1 as slave device in RX mode
  144 000003E4                 str32            I2C1_ICSAR, 0x00000001 ; Slave 
                                                            address = 0x01
   46 000003E4 E59F00CC        ldr              r0, = I2C1_ICSAR
   47 000003E8 E3A01001        ldr              r1, = 0x00000001
   48 000003EC E5801000        str              r1, [r0]
  145 000003F0                 str32            I2C1_ICSCR, 0x00000006 
                                                            ; SCSS, SDBS
   46 000003F0 E59F00C4        ldr              r0, = I2C1_ICSCR
   47 000003F4 E3A01006        ldr              r1, = 0x00000006
   48 000003F8 E5801000        str              r1, [r0]
  146 000003FC                 str32            I2C1_ICSSR, 0x00000000
   46 000003FC E59F00BC        ldr              r0, = I2C1_ICSSR
   47 00000400 E3A01000        ldr              r1, = 0x00000000
   48 00000404 E5801000        str              r1, [r0]
  147 00000408                 str32            I2C1_ICCCR, 0x0000001E ; SCGD =
                                                             3, CDF = 6; f = 40
                                                            0kHz
   46 00000408 E59F00B4        ldr              r0, = I2C1_ICCCR
   47 0000040C E3A0101E        ldr              r1, = 0x0000001E
   48 00000410 E5801000        str              r1, [r0]
  148 00000414         
  149 00000414         ; Master send START condition and slave address
  150 00000414                 str32            I2C0_ICMCR, 0x00000089 
                                                            ; MDBS, MIE, ESG
   46 00000414 E59F00AC        ldr              r0, = I2C0_ICMCR
   47 00000418 E3A01089        ldr              r1, = 0x00000089
   48 0000041C E5801000        str              r1, [r0]
  151 00000420         
  152 00000420         ; Wait for MNR
  153 00000420         ; Master received ACK so slave address has been transmit
                       ted
  154 00000420         ; wait32  I2C0_ICMSR, 0x00000040
  155 00000420         ; clrb    I2C0_ICMSR, #0
  156 00000420         
  157 00000420 E3A08000        mov              r8, #0
  158 00000424 E3A09001        mov              r9, #1
  159 00000428         wait_int
  160 00000428 E1580009        cmp              r8, r9



ARM Macro Assembler    Page 26 


  161 0000042C 1AFFFFFD        bne              wait_int
  162 00000430         
  163 00000430         ; Configure LSI pins
  164 00000430 E59FA094        ldr              r10, = 0xa55a0000
  165 00000434 E30F1FFC        ldr              r1, = 0x0000fffc
  166 00000438 E1E01001        mvn              r1, r1
  167 0000043C E1E02001        mvn              r2, r1
  168 00000440 E59F0054        ldr              r0, = 0xe6050800 ; PMMR_GP2
  169 00000444 E5802000        str              r2, [r0]
  170 00000448 E59F0050        ldr              r0, = 0xe6050900 ; MOD_SEL_GP2
  171 0000044C E5801000        str              r1, [r0]
  172 00000450         
  173 00000450                 delay            10
    5 00000450 E3A0000A        ldr              r0, = 10
    6 00000454 E3A01000        ldr              r1, = 0
    7 00000458         1
    8 00000458 E2811001        add              r1, r1, #1
    9 0000045C E1510000        cmp              r1, r0
   10 00000460 1AFFFFFC        bne              %b1
  174 00000464         
  175 00000464         ; Dump interrupt ACK ID
  176 00000464 E5874000        str              r4, [r7]
  177 00000468 E2877004        add              r7, r7, #4
  178 0000046C         
  179 0000046C E59F405C        ldr              r4, = 0x12345678
  180 00000470 E5874000        str              r4, [r7]
  181 00000474 E2877004        add              r7, r7, #4
  182 00000478         
  183 00000478                 delay            10
    5 00000478 E3A0000A        ldr              r0, = 10
    6 0000047C E3A01000        ldr              r1, = 0
    7 00000480         1
    8 00000480 E2811001        add              r1, r1, #1
    9 00000484 E1510000        cmp              r1, r0
   10 00000488 1AFFFFFC        bne              %b1
  184 0000048C         
  185 0000048C         ; Stop the simulation
  186 0000048C E59F0040        ldr              r0, = 0x070003F0
  187 00000490 E5800000        str              r0, [r0]
  188 00000494         
  189 00000494         ; Infinity loop
  190 00000494         inf_loop
  191 00000494 EAFFFFFE        b                inf_loop
  192 00000498         
  193 00000498 EA00000E        b                main_ltorg
  194 0000049C E6050800 
              E6050900 
              A55A0101 
              E6500018 
              E6500020 
              E650000C 
              E6500014 
              E650801C 
              E6508000 
              E6508008 
              E6508018 
              E6500004 
              A55A0000 
              12345678 



ARM Macro Assembler    Page 27 


              070003F0         ltorg
  195 000004D8         main_ltorg
  196 000004D8         
  197 000004D8         main_end
  198 000004D8         
  199 000004D8         ;*******************************************************
                       ***********************
  200 000004D8         
  201 000004D8         exc_start
  202 000004D8         
  203 000004D8         UndefinedInstruction_Handler
  204 000004D8 EAFFFFFE        b                UndefinedInstruction_Handler
  205 000004DC E160006E        eret
  206 000004E0         
  207 000004E0         SupervisorCall_Handler
  208 000004E0 EAFFFFFE        b                SupervisorCall_Handler
  209 000004E4 E160006E        eret
  210 000004E8         
  211 000004E8         PrefetchAbort_Handler
  212 000004E8 EAFFFFFE        b                PrefetchAbort_Handler
  213 000004EC E160006E        eret
  214 000004F0         
  215 000004F0         DataAbort_Handler
  216 000004F0 EAFFFFFE        b                DataAbort_Handler
  217 000004F4 E160006E        eret
  218 000004F8         
  219 000004F8         IRQ_Handler
  220 000004F8         
  221 000004F8         ; Read ACK ID
  222 000004F8 EE1C0F1C        MRC              p15,0,r0,c12,c12,0
  223 000004FC         
  224 000004FC         ; Check if it's I2C interrupt
  225 000004FC E300110E        ldr              r1, = INTID
  226 00000500 E1510000        cmp              r1, r0
  227 00000504 1A000000        bne              end_irq
  228 00000508         
  229 00000508         ; Copy ACK ID into r4
  230 00000508 E1A04000        mov              r4, r0
  231 0000050C         
  232 0000050C         end_irq
  233 0000050C         
  234 0000050C         ; Store ACK ID into EOIR
  235 0000050C EE0C0F3C        MCR              p15,0,r0,c12,c12,1
  236 00000510         
  237 00000510 E3A08001        mov              r8, #1
  238 00000514         
  239 00000514 E160006E        eret
  240 00000518         
  241 00000518 EAFFFFFF        b                exc_ltorg
  242 0000051C                 ltorg
  243 0000051C         exc_ltorg
  244 0000051C         
  245 0000051C E320F000        nop
  246 00000520         
  247 00000520         exc_end
  248 00000520         
  249 00000520         ;*******************************************************
                       ***********************
  250 00000520         



ARM Macro Assembler    Page 28 


  251 00000520                 end
Command Line: --cpu=Cortex-R52 -m -I/design01/rcarv3ufed_master/common_rvc/rcar
v3u/VNET1/MASTER_TM/I2C_V3U_RTL/asm/i2c0_interrupt_check --list=test.list /desi
gn01/rcarv3ufed_master/common_rvc/rcarv3u/VNET1/MASTER_TM/I2C_V3U_RTL/asm/i2c0_
interrupt_check/test.s
