


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000                 IF               :DEF: __AARCH64
    3 00000000         
    4 00000000                 area             STARTUP, code, readonly, align=
8
    5 00000000         
    6 00000000                 import           __use_no_semihosting_swi
    7 00000000                 import           __vectors_start
    8 00000000                 import           __main
    9 00000000         
   10 00000000                 entry
   11 00000000         
   12 00000000         Reset_Handler
   13 00000000         
   14 00000000 52810000        mov              w0, #0x0800
   15 00000004 72BCC2E0        movk             w0, #0xe617, lsl #16
   16 00000008 52800201        mov              w1, #0x10
   17 0000000C B9000001        str              w1, [x0]
   18 00000010 D5033F9F        dsb              sy
   19 00000014 D5033FDF        isb
   20 00000018         
   21 00000018         ; Initialize system registers
   22 00000018 52800000        mov              w0, #0
   23 0000001C D5184020        MSR              ELR_EL1,x0
   24 00000020 D51C4020        MSR              ELR_EL2,x0
   25 00000024 D51E4020        MSR              ELR_EL3,x0
   26 00000028 D5184000        MSR              SPSR_EL1,x0
   27 0000002C D51C4000        MSR              SPSR_EL2,x0
   28 00000030 D51E4000        MSR              SPSR_EL3,x0
   29 00000034         
   30 00000034         ; Vector table
   31 00000034 580001E0        ldr              x0, = __vectors_start
   32 00000038 D51EC000        msr              VBAR_EL3, x0
   33 0000003C         
   34 0000003C         ; Architectural Feature Trap EL3
   35 0000003C 52800000        mov              w0, #0
   36 00000040 D51E1140        msr              CPTR_EL3, x0
   37 00000044         
   38 00000044         ; Secure configuration
   39 00000044 52800000        mov              w0, #0
   40 00000048 32150000        orr              w0, w0, #(1 << 11)
   41 0000004C 32160000        orr              w0, w0, #(1 << 10)
   42 00000050 321D0000        orr              w0, w0, #(1 << 3)
   43 00000054 321E0000        orr              w0, w0, #(1 << 2)
   44 00000058 321F0000        orr              w0, w0, #(1 << 1)
   45 0000005C D51E1100        msr              SCR_EL3, x0
   46 00000060         
   47 00000060         ; Interrupt mask bits
   48 00000060 52800000        mov              w0, #0
   49 00000064 D51B4220        msr              DAIF, x0
   50 00000068         
   51 00000068                 IF               :DEF: __USE_DDR
   52 00000068         ; Initialize DDR
   53 00000068                 import           __ddr_init
   54 00000068 94000000        bl               __ddr_init
   55 0000006C                 ENDIF
   56 0000006C         
   57 0000006C         ; Give the control to the C library
   58 0000006C 14000000        b                __main



ARM Macro Assembler    Page 2 


   59 00000070         
   60 00000070                 ENDIF
   61 00000070         
   62 00000070                 end
              00000000 
              00000000 
Command Line: --cpu=8.2-A.64 -m -I/design01/rcarv3ufed_master/common_rvc/rcarv3
u/VNET1/MASTER_TM/I2C_V3U_RTL/ct/i2c0/full_check -I/design01/rcarv3ufed_master/
common_rvc/rcarv3u/VNET1/MASTER_TM/I2C_V3U_RTL/ct/include --predefine="__AARCH6
4 SETL {TRUE}" --predefine="__USE_DDR SETL {TRUE}" --list=startup_ca76.list /de
sign01/rcarv3ufed_master/common_rvc/rcarv3u/VNET1/MASTER_TM/I2C_V3U_RTL/ct/incl
ude/rcar_v3u/startup/startup_ca76.s
