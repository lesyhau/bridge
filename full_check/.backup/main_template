
#include <stdint.h>
#include <global.h>
#include <sim_utils.h>
#include <v3u.h>
#include <i2c.h>
#include <pfc.h>
#include <cpg.h>
#include <dmac.h>
#include <pfc.h>
#include "pattern_name.h"

const uint32_t (*pattern[])(void) =
{
    &pattern_name,
};

const uint32_t totalPattern = sizeof(pattern) / sizeof(pattern[0]);
uint32_t result[totalPattern];

int main(void)
{
    I2C_configPins();
    I2C_modelConnect(I2C0CH, I2C1CH);

	uint8_t i;
    uint32_t testResult = TEST_PASS;

    for (i = 0; i < totalPattern; i++)
    {
        result[i] = (*pattern[i])();

        /* Only continue if the current pattern result is pass */
        if (result[i] == TEST_FAIL)
        {
            testResult = TEST_FAIL;
            break;
        }
    }

    I2C_modelDisable();
    I2C_releasePins();

    if (testResult == TEST_FAIL)
    {
	    for (i = 0; i < totalPattern; i++)
	    {
	    	Sim_Dump(result[i]);
	    }
    }

    Sim_Judge(testResult);
	Sim_Stop();

    while(1);

    return (0);
}

