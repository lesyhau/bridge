
    .set    __arm__, 1

    .ifdef	__arm__

    // HPRBAR.SH
    .equ    SH_POS          , 3
    .equ    NON_SHAREABLE   , (0 << SH_POS)
    .equ    OUT_SHAREABLE   , (2 << SH_POS)
    .equ    IN_SHAREABLE    , (3 << SH_POS)

    // HPRBAR.AP
    .equ    AP_POS          , 1
    .equ    RW_EL2          , (0 << AP_POS)
    .equ    RW              , (1 << AP_POS)
    .equ    RO_EL2          , (2 << AP_POS)
    .equ    RO              , (3 << AP_POS)

    // HPRBAR.XN
    .equ    XN_POS          , 0
    .equ    EXECUTE_NEVER   , (1 << XN_POS)
    .equ    EXECUTABLE      , (0 << XN_POS)

    // HPRLAR.AttrIndx
    .equ    AttrIndx_POS    , 1
    .equ    ATTR0           , (0 << AttrIndx_POS)
    .equ    ATTR1           , (1 << AttrIndx_POS)
    .equ    ATTR2           , (2 << AttrIndx_POS)
    .equ    ATTR3           , (3 << AttrIndx_POS)
    .equ    ATTR4           , (4 << AttrIndx_POS)
    .equ    ATTR5           , (5 << AttrIndx_POS)
    .equ    ATTR6           , (6 << AttrIndx_POS)
    .equ    ATTR7           , (7 << AttrIndx_POS)
    .equ    ATTR8           , (8 << AttrIndx_POS)
    .equ    ATTR9           , (9 << AttrIndx_POS)
    .equ    ATTR30          , (10 << AttrIndx_POS)
    .equ    ATTR31          , (11 << AttrIndx_POS)
    .equ    ATTR32          , (12 << AttrIndx_POS)
    .equ    ATTR33          , (13 << AttrIndx_POS)
    .equ    ATTR34          , (14 << AttrIndx_POS)
    .equ    ATTR35          , (15 << AttrIndx_POS)

    // HPRLAR.EN
    .equ    EN_POS          , 0
    .equ    REGION_ENABLE   , (1 << EN_POS)

    .section    MPU_INIT
    
    .global  __mpu_init
    .global  __mpu_init_el1

__mpu_init:

    // Define memory regions attribute
    // Attribute 0: 0xff Normal, Outer write-back non-transient, RW allocate, Inner write-back non-transient
    // Attribute 1: 0x04 Device, nGnRE
    // Attribute 2: 0x44 Normal, Outer non-cacheable, Inner non-cacheable
    // Attribute 3: 0x00 Device, nGnRnE
    mov  r0, #0x04ff
    movt r0, #0x0044
    mcr p15, 4, r0, c10, c2, 0
    mov  r0, #0xbb00
    movt r0, #0xddee
    mcr p15, 4, r0, c10, c2, 1

    // BSC
    mov r0, #0
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0x00000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0x00000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0x07ffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0x07ffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // RPC
    mov r0, #1
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0x08000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0x08000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0x0fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0x0fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // BSC
    mov r0, #2
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0x10000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0x10000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0x1fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0x1fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // RPC
    mov r0, #3
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0x20000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0x20000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0x3fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0x3fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // SDRAM
    mov r0, #4
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0x40000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0x40000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xbfffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xbfffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // PCIE
    mov r0, #5
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xc0000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xc0000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xdfffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xdfffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // Peripheral
    mov r0, #6
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xe0000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xe0000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xe62fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xe62fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // SRAM
    mov r0, #7
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xe6300000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xe6300000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xe63fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xe63fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // Peripheral
    mov r0, #8
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xe6400000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xe6400000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xeb0fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xeb0fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // SecROM
    mov r0, #9
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xeb100000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xeb100000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xeb3fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xeb3fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // Peripheral
    mov r0, #10
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xeb400000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xeb400000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xecffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xecffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // IMP RAM
    mov r0, #11
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xed000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xed000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xedffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xedffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // Peripheral
    mov r0, #12
    mcr p15, 4, r0, c6, c2, 1
    mov  r0, #(((0xee000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) & 0x0000ffff)
    movt r0, #(((0xee000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW) >> 16)
    mcr p15, 4, r0, c6, c3, 0
    mov  r0, #(((0xffffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) & 0x0000ffff)
    movt r0, #(((0xffffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE) >> 16)
    mcr p15, 4, r0, c6, c3, 1

    // Enable EL2 MPU
    mrc p15, 4, r0, c1, c0, 0
    orr r0, r0, #0x1
    dsb
    mcr p15, 4, r0, c1, c0, 0
    isb

    bx  lr

__mpu_init_el1:

//    // Define memory regions attribute
//    // Attribute 0: 0xff Normal, Outer write-back non-transient, RW allocate, Inner write-back non-transient
//    // Attribute 1: 0x04 Device, nGnRE
//    // Attribute 2: 0x44 Normal, Outer non-cacheable, Inner non-cacheable
//    ldr r0, = 0x444404ff
//    mcr p15, 4, r0, c10, c2, 0
//    ldr r0, = 0xddeebb00
//    mcr p15, 4, r0, c10, c2, 1
//
//    // BSC
//    mov r0, #0
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0x00000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0x07ffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // RPC
//    mov r0, #1
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0x08000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0x0fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // BSC
//    mov r0, #2
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0x10000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0x1fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // RPC
//    mov r0, #3
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0x20000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0x3fffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // SDRAM
//    mov r0, #4
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0x40000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xbfffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // PCIE
//    mov r0, #5
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xc0000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xdfffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // Peripheral
//    mov r0, #6
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xe0000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xe62fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // SRAM
//    mov r0, #7
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xe6300000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xe63fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // Peripheral
//    mov r0, #8
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xe6400000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xeb0fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // SecROM
//    mov r0, #9
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xeb100000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xeb3fffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // Peripheral
//    mov r0, #10
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xeb400000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xecffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // IMP RAM
//    mov r0, #11
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xed000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xedffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR0 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // Peripheral
//    mov r0, #12
//    mcr p15, 0, r0, c6, c2, 1
//    ldr r0, = (0xee000000 & (~(0x1 << 5))) | NON_SHAREABLE | RW
//    mcr p15, 0, r0, c6, c3, 0
//    ldr r0, = (0xffffffff & (~(0x3f) & (~(0x3 << 4)))) | ATTR3 | REGION_ENABLE
//    mcr p15, 0, r0, c6, c3, 1
//
//    // Enable EL2 MPU
//    mrc p15, 0, r0, c1, c0, 0
//    orr r0, r0, #0x1
//    dsb
//    mcr p15, 0, r0, c1, c0, 0
//    isb

    bx  lr

    .endif

    .end
