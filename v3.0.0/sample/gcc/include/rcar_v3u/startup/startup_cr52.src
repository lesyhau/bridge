
    .ifdef	__arm__

    .section    startup
	
    .global __Reset_Handler
    .global UND_Handler
    .global SVC_Handler
    .global PAB_Handler
    .global DAB_Handler
    .global IRQ_Handler
    .global __mpu_init
    .global _start
    .global __vectors_copy_start
	.global __use_no_semihosting_swi

__vectors_start:

    b   __Reset_Handler
    b   __UDF_Handler
    b   __SVC_Handler
    b   __PAB_Handler
    b   __DAB_Handler
    nop
    b   __IRQ_Handler
__FIQ_Handler:
    b   __FIQ_Handler
    
__UDF_Handler:
    push    {r0-r12,lr}
    bl      UND_Handler
    pop     {r0-r12,lr}
    eret

__SVC_Handler:
    push    {r0-r12,lr}
    bl      SVC_Handler
    pop     {r0-r12,lr}
    eret

__PAB_Handler:
    push    {r0-r12,lr}
    bl      PAB_Handler
    pop     {r0-r12,lr}
    eret

__DAB_Handler:
    push    {r0-r12,lr}
    bl      DAB_Handler
    pop     {r0-r12,lr}
    eret

__IRQ_Handler:
    push    {r0-r12,lr}
    bl      IRQ_Handler
    pop     {r0-r12,lr}
    eret

    b   1f
    .ltorg
1:

__vectors_end:

__Reset_Handler:

    // Initialize MPU
    bl  __mpu_init

    // Set the CPACR for access to CP10 and CP11 (the FPU coprocessors)
    ldr r0, = (0xF << 20)
    mcr p15, 0, r0, c1, c0, 2
    // Set the FPEXC EN bit to enable the FPU
    mov  r3, #0x0
    movt r3, #0x4000
    vmsr FPEXC, r3

    // Change vector base address
    ldr r0, = __vectors_copy_start
    mcr p15, 4, r0, c12, c0, 0
    mcr p15, 0, r0, c12, c0, 0

    .ifdef	__USE_DDR

    // Copy DDR init code from external memory to SRAM
    mov     r0, #0x0
    movt    r0, #0xe730
    // sar
    ldr     r1, = __ddr_init_start
    str     r1, [r0, #0x0]
    // dar
    mov     r1, #0x0
    movt    r1, #0xe630
    ldr     r2, = __ddr_init_start
    add     r1, r1, r2
    str     r1, [r0, #0x4]
    // tcr
    ldr     r1, = __ddr_init_end
    ldr     r2, = __ddr_init_start
    sub     r1, r1, r2
    lsr     r1, r1, #6
    add     r1, r1, #1
    str     r1, [r0, #0x8]
    // chcr
    mov     r1, #0x5409
    movt    r1, #0x0010
    str     r1, [r0, #0xc]
    // dmaor
    mov     r0, #0x0
    movt    r0, #0xe735
    mov     r1, #0x1
    str     r1, [r0, #0x60]
    // wait for TE
    mov     r0, #0
    movt    r0, #0xe730
wait_TE:
    ldr     r1, [r0, #0xc]
    mov     r2, #0x2
    and     r1, r1, r2
    cmp     r1, r2
    bne     wait_TE
    // clear TE, DE
    mov     r2, #0x3
    mvn     r2, r2
    and     r1, r1, r2
    str     r1, [r0, #0xc]
    // clear dmaor
    mov     r0, #0x0
    movt    r0, #0xe735
    mov     r1, #0x0
    str     r1, [r0, #0x60]

    // Jump to DDR init code in SRAM
    ldr r0, = 0xe6300000 + __ddr_init_start
    mov pc, r0

    b   1f
    .ltorg
1:

__ddr_init_start:

    // Initialize DDR
    include rel_dbsc4_init_lpddr4_4266_CL40WL18_181012_cr52.h
    
    // Call __main
    ldr r0, = _start
    mov pc, r0

    b   1f
    .ltorg
1:

__ddr_init_end:

    .else

    // Call __main
    ldr r0, = _start
    mov pc, r0

    b   1f
    .ltorg
1:

    .endif

    .section    vectors_copy
	
    .global __Reset_Handler
    .global UND_Handler
    .global SVC_Handler
    .global PAB_Handler
    .global DAB_Handler
    .global IRQ_Handler
    .global __mpu_init
    .global _start
    .global __vectors_copy_start
	.global __use_no_semihosting_swi

__vectors_copy_start:

    b   __Reset_Handler
    b   __UDF_Handler_Copy
    b   __SVC_Handler_Copy
    b   __PAB_Handler_Copy
    b   __DAB_Handler_Copy
    nop
    b   __IRQ_Handler_COpy
__FIQ_Handler_Copy:
    b   __FIQ_Handler_Copy
    
__UDF_Handler_Copy:
    push    {r0-r12,lr}
    bl      UND_Handler
    pop     {r0-r12,lr}
    eret

__SVC_Handler_Copy:
    push    {r0-r12,lr}
    bl      SVC_Handler
    pop     {r0-r12,lr}
    eret

__PAB_Handler_Copy:
    push    {r0-r12,lr}
    bl      PAB_Handler
    pop     {r0-r12,lr}
    eret

__DAB_Handler_Copy:
    push    {r0-r12,lr}
    bl      DAB_Handler
    pop     {r0-r12,lr}
    eret

__IRQ_Handler_Copy:
    push    {r0-r12,lr}
    bl      IRQ_Handler
    pop     {r0-r12,lr}
    eret

    b   1f
    .ltorg
1:

__vectors_copy_end:

    .endif

    .end
